{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE TypeFamilies #-}

-- generated by 'Morpheus' CLI
module Simple
  ( rootResolver
  )
where

import           Data.Typeable                  ( Typeable )
import           GHC.Generics                   ( Generic )
import           Data.Morpheus.Kind             ( SCALAR
                                                , ENUM
                                                , INPUT_OBJECT
                                                , OBJECT
                                                , UNION
                                                )
import           Data.Morpheus.Types            ( GQLRootResolver(..)
                                                , Resolver(..)
                                                , IORes
                                                , IOMutRes
                                                , IOSubRes
                                                , Event(..)
                                                , GQLType(..)
                                                , GQLScalar(..)
                                                , ScalarValue(..)
                                                , Undefined(..)
                                                , ResolveQ
                                                )
import           Data.Text                      ( Text )

rootResolver :: GQLRootResolver IO () Query Undefined Undefined
rootResolver = GQLRootResolver { queryResolver        = resolveQuery
                               , mutationResolver     = Undefined
                               , subscriptionResolver = Undefined
                               }




---- GQL Query ------------------------------- 
data Query m = Query
    { deity :: ArgDeity -> m Deity
  ,  character :: ArgCharacter -> m Character
    }
 deriving (Generic)

newtype ArgDeity = ArgDeity
    { name :: Maybe [Maybe [Maybe [[Maybe [Text]]]]]
    }
 deriving (Generic)

data ArgCharacter = ArgCharacter
    { characterID :: Text
  ,  age :: Maybe Int
    }
 deriving (Generic)

instance Typeable m => GQLType (Query m) where
  type KIND (Query m) = OBJECT


resolveQuery :: Query (IORes ())
resolveQuery =
  Query { deity = const resolveDeity, character = const resolveCharacter }




---- GQL Deity ------------------------------- 
data Deity = Deity
    { fullName :: () -> IORes () Text
  ,  power :: () -> IORes () (Maybe Power)
    }
 deriving (Generic)

instance GQLType Deity where
  type KIND Deity = OBJECT



resolveDeity :: IORes () Deity
resolveDeity =
  return Deity { fullName = const $ return "", power = const $ return Nothing }




---- GQL City ------------------------------- 
data City =
  Athens
  | Ithaca
  | Sparta
  | Troy deriving (Generic)

instance GQLType City where
  type KIND City = ENUM



resolveCity :: IORes () City
resolveCity = return Athens



---- GQL Power ------------------------------- 
data Power = Power Int Int

instance GQLType Power where
  type KIND Power = SCALAR

instance GQLScalar  Power where
  parseValue _ = pure (Power 0 0)
  serialize (Power x y) = Int (x + y)



resolvePower :: IORes () Power
resolvePower = return $ Power 0 0



---- GQL Creature ------------------------------- 
data Creature = Creature
    { creatureName :: () -> IORes () Text
  ,  realm :: () -> IORes () City
  ,  immortality :: () -> IORes () Bool
    }
 deriving (Generic)

instance GQLType Creature where
  type KIND Creature = OBJECT

resolveCreature :: IORes () Creature
resolveCreature = return Creature { creatureName = const $ return ""
                                  , realm        = const resolveCity
                                  , immortality  = const $ return False
                                  }


---- GQL Character ------------------------------- 
data Character =
  Character_CREATURE Creature
  | Character_DEITY Deity deriving (Generic)

instance GQLType Character where
  type KIND Character = UNION



resolveCharacter :: IORes () Character
resolveCharacter = Character_CREATURE <$> resolveCreature
